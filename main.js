"use strict";var Qn=Object.defineProperty;var Ar=e=>{throw TypeError(e)};var Wn=(e,t,r)=>t in e?Qn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var Ut=(e,t,r)=>Wn(e,typeof t!="symbol"?t+"":t,r),Tr=(e,t,r)=>t.has(e)||Ar("Cannot "+r);var te=(e,t,r)=>(Tr(e,t,"read from private field"),r?r.call(e):t.get(e)),Yt=(e,t,r)=>t.has(e)?Ar("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,r),Zt=(e,t,r,n)=>(Tr(e,t,"write to private field"),n?n.call(e,r):t.set(e,r),r);const Zr=require("obsidian"),de=2,Gr=4,Pt=8,sr=16,Fe=32,ot=64,ar=128,ie=256,St=512,le=1024,Le=2048,Ge=4096,Oe=8192,ir=16384,Kr=32768,lr=65536,$n=1<<17,Nr=1<<18,Xn=1<<19,zr=1<<20,Qt=1<<21,$e=Symbol("$state"),Qr=Symbol("legacy props"),Jn=Symbol(""),Wr=3,_t=8,Dr=!1;var At=Array.isArray,es=Array.prototype.indexOf,or=Array.from,$r=Object.defineProperty,nt=Object.getOwnPropertyDescriptor,Xr=Object.getOwnPropertyDescriptors,ts=Object.prototype,rs=Array.prototype,ur=Object.getPrototypeOf,xr=Object.isExtensible;const st=()=>{};function ns(e){return e()}function gt(e){for(var t=0;t<e.length;t++)e[t]()}const ss=typeof requestIdleCallback>"u"?e=>setTimeout(e,1):requestIdleCallback;let pt=[],bt=[];function Jr(){var e=pt;pt=[],gt(e)}function en(){var e=bt;bt=[],gt(e)}function cr(e){pt.length===0&&queueMicrotask(Jr),pt.push(e)}function as(e){bt.length===0&&ss(en),bt.push(e)}function is(){pt.length>0&&Jr(),bt.length>0&&en()}function tn(e){return e===this.v}function rn(e,t){return e!=e?t==t:e!==t||e!==null&&typeof e=="object"||typeof e=="function"}function fr(e){return!rn(e,this.v)}function ls(e){throw new Error("https://svelte.dev/e/effect_in_teardown")}function os(){throw new Error("https://svelte.dev/e/effect_in_unowned_derived")}function us(e){throw new Error("https://svelte.dev/e/effect_orphan")}function cs(){throw new Error("https://svelte.dev/e/effect_update_depth_exceeded")}function fs(){throw new Error("https://svelte.dev/e/hydration_failed")}function ds(e){throw new Error("https://svelte.dev/e/props_invalid_value")}function vs(){throw new Error("https://svelte.dev/e/state_descriptors_fixed")}function hs(){throw new Error("https://svelte.dev/e/state_prototype_fixed")}function _s(){throw new Error("https://svelte.dev/e/state_unsafe_mutation")}let ut=!1,gs=!1;function ps(){ut=!0}const dr=1,vr=2,nn=4,bs=8,ws=16,ys=2,ms=8,Cs=1,Es=2,hr="[",_r="[!",gr="]",at={},re=Symbol(),ks="http://www.w3.org/1999/xhtml";function sn(e){throw new Error("https://svelte.dev/e/lifecycle_outside_component")}let I=null;function Sr(e){I=e}function Ve(e,t=!1,r){var n=I={p:I,c:null,d:!1,e:null,m:!1,s:e,x:null,l:null};ut&&!t&&(I.l={s:null,u:null,r1:[],r2:yt(!1)}),mn(()=>{n.d=!0})}function Ie(e){const t=I;if(t!==null){e!==void 0&&(t.x=e);const i=t.e;if(i!==null){var r=O,n=q;t.e=null;try{for(var s=0;s<i.length;s++){var a=i[s];Ye(a.effect),ke(a.reaction),wr(a.fn)}}finally{Ye(r),ke(n)}}I=t.p,t.m=!0}return e||{}}function Tt(){return!ut||I!==null&&I.l===null}function rt(e){if(typeof e!="object"||e===null||$e in e)return e;const t=ur(e);if(t!==ts&&t!==rs)return e;var r=new Map,n=At(e),s=je(0),a=q,i=l=>{var u=q;ke(a);var o=l();return ke(u),o};return n&&r.set("length",je(e.length)),new Proxy(e,{defineProperty(l,u,o){(!("value"in o)||o.configurable===!1||o.enumerable===!1||o.writable===!1)&&vs();var h=r.get(u);return h===void 0?h=i(()=>{var f=je(o.value);return r.set(u,f),f}):D(h,o.value,!0),!0},deleteProperty(l,u){var o=r.get(u);if(o===void 0){if(u in l){const c=i(()=>je(re));r.set(u,c),Gt(s)}}else{if(n&&typeof u=="string"){var h=r.get("length"),f=Number(u);Number.isInteger(f)&&f<h.v&&D(h,f)}D(o,re),Gt(s)}return!0},get(l,u,o){var d;if(u===$e)return e;var h=r.get(u),f=u in l;if(h===void 0&&(!f||(d=nt(l,u))!=null&&d.writable)&&(h=i(()=>{var v=rt(f?l[u]:re),w=je(v);return w}),r.set(u,h)),h!==void 0){var c=_(h);return c===re?void 0:c}return Reflect.get(l,u,o)},getOwnPropertyDescriptor(l,u){var o=Reflect.getOwnPropertyDescriptor(l,u);if(o&&"value"in o){var h=r.get(u);h&&(o.value=_(h))}else if(o===void 0){var f=r.get(u),c=f==null?void 0:f.v;if(f!==void 0&&c!==re)return{enumerable:!0,configurable:!0,value:c,writable:!0}}return o},has(l,u){var c;if(u===$e)return!0;var o=r.get(u),h=o!==void 0&&o.v!==re||Reflect.has(l,u);if(o!==void 0||O!==null&&(!h||(c=nt(l,u))!=null&&c.writable)){o===void 0&&(o=i(()=>{var d=h?rt(l[u]):re,v=je(d);return v}),r.set(u,o));var f=_(o);if(f===re)return!1}return h},set(l,u,o,h){var b;var f=r.get(u),c=u in l;if(n&&u==="length")for(var d=o;d<f.v;d+=1){var v=r.get(d+"");v!==void 0?D(v,re):d in l&&(v=i(()=>je(re)),r.set(d+"",v))}if(f===void 0)(!c||(b=nt(l,u))!=null&&b.writable)&&(f=i(()=>je(void 0)),D(f,rt(o)),r.set(u,f));else{c=f.v!==re;var w=i(()=>rt(o));D(f,w)}var g=Reflect.getOwnPropertyDescriptor(l,u);if(g!=null&&g.set&&g.set.call(h,o),!c){if(n&&typeof u=="string"){var E=r.get("length"),A=Number(u);Number.isInteger(A)&&A>=E.v&&D(E,A+1)}Gt(s)}return!0},ownKeys(l){_(s);var u=Reflect.ownKeys(l).filter(f=>{var c=r.get(f);return c===void 0||c.v!==re});for(var[o,h]of r)h.v!==re&&!(o in l)&&u.push(o);return u},setPrototypeOf(){hs()}})}function Gt(e,t=1){D(e,e.v+t)}function Ft(e){var t=de|Le,r=q!==null&&q.f&de?q:null;return O===null||r!==null&&r.f&ie?t|=ie:O.f|=zr,{ctx:I,deps:null,effects:null,equals:tn,f:t,fn:e,reactions:null,rv:0,v:null,wv:0,parent:r??O}}function Pe(e){const t=Ft(e);return t.equals=fr,t}function an(e){var t=e.effects;if(t!==null){e.effects=null;for(var r=0;r<t.length;r+=1)Ze(t[r])}}function As(e){for(var t=e.parent;t!==null;){if(!(t.f&de))return t;t=t.parent}return null}function ln(e){var t,r=O;Ye(As(e));try{an(e),t=bn(e)}finally{Ye(r)}return t}function on(e){var t=ln(e);if(e.equals(t)||(e.v=t,e.wv=gn()),!ct){var r=(He||e.f&ie)&&e.deps!==null?Ge:le;be(e,r)}}const wt=new Map;function yt(e,t){var r={f:0,v:e,reactions:null,equals:tn,rv:0,wv:0};return r}function je(e,t){const r=yt(e);return Ns(r),r}function ee(e,t=!1,r=!0){var s;const n=yt(e);return t||(n.equals=fr),ut&&r&&I!==null&&I.l!==null&&((s=I.l).s??(s.s=[])).push(n),n}function D(e,t,r=!1){q!==null&&(!Ee||q.f&Nr)&&Tt()&&q.f&(de|sr|Nr)&&!(z!=null&&z[1].includes(e)&&z[0]===q)&&_s();let n=r?rt(t):t;return Wt(e,n)}function Wt(e,t){if(!e.equals(t)){var r=e.v;ct?wt.set(e,t):wt.set(e,r),e.v=t,e.f&de&&(e.f&Le&&ln(e),be(e,e.f&ie?Ge:le)),e.wv=gn(),un(e,Le),Tt()&&O!==null&&O.f&le&&!(O.f&(Fe|ot))&&(ue===null?Ds([e]):ue.push(e))}return t}function un(e,t){var r=e.reactions;if(r!==null)for(var n=Tt(),s=r.length,a=0;a<s;a++){var i=r[a],l=i.f;l&Le||!n&&i===O||(be(i,t),l&(le|ie)&&(l&de?un(i,Ge):br(i)))}}function Vt(e){console.warn("https://svelte.dev/e/hydration_mismatch")}let L=!1;function Re(e){L=e}let V;function ge(e){if(e===null)throw Vt(),at;return V=e}function It(){return ge(Me(V))}function y(e){if(L){if(Me(V)!==null)throw Vt(),at;V=e}}function $t(e=1){if(L){for(var t=e,r=V;t--;)r=Me(r);V=r}}function Xt(){for(var e=0,t=V;;){if(t.nodeType===_t){var r=t.data;if(r===gr){if(e===0)return t;e-=1}else(r===hr||r===_r)&&(e+=1)}var n=Me(t);t.remove(),t=n}}function cn(e){if(!e||e.nodeType!==_t)throw Vt(),at;return e.data}var qr,fn,dn,vn;function Jt(){if(qr===void 0){qr=window,fn=/Firefox/.test(navigator.userAgent);var e=Element.prototype,t=Node.prototype,r=Text.prototype;dn=nt(t,"firstChild").get,vn=nt(t,"nextSibling").get,xr(e)&&(e.__click=void 0,e.__className=void 0,e.__attributes=null,e.__style=void 0,e.__e=void 0),xr(r)&&(r.__t=void 0)}}function lt(e=""){return document.createTextNode(e)}function Ue(e){return dn.call(e)}function Me(e){return vn.call(e)}function m(e,t){if(!L)return Ue(e);var r=Ue(V);if(r===null)r=V.appendChild(lt());else if(t&&r.nodeType!==Wr){var n=lt();return r==null||r.before(n),ge(n),n}return ge(r),r}function er(e,t){if(!L){var r=Ue(e);return r instanceof Comment&&r.data===""?Me(r):r}return V}function k(e,t=1,r=!1){let n=L?V:e;for(var s;t--;)s=n,n=Me(n);if(!L)return n;if(r&&(n==null?void 0:n.nodeType)!==Wr){var a=lt();return n===null?s==null||s.after(a):n.before(a),ge(a),a}return ge(n),n}function pr(e){e.textContent=""}function Ts(e){var t=O;if(t.f&Kr)hn(e,t);else{if(!(t.f&ar))throw e;t.fn(e)}}function hn(e,t){for(;t!==null;){if(t.f&ar)try{t.fn(e);return}catch{}t=t.parent}throw e}let mt=!1,Ct=null,Xe=!1,ct=!1;function Rr(e){ct=e}let ht=[];let q=null,Ee=!1;function ke(e){q=e}let O=null;function Ye(e){O=e}let z=null;function Ns(e){q!==null&&q.f&Qt&&(z===null?z=[q,[e]]:z[1].push(e))}let X=null,ae=0,ue=null;function Ds(e){ue=e}let _n=1,qt=0,He=!1;function gn(){return++_n}function Nt(e){var f;var t=e.f;if(t&Le)return!0;if(t&Ge){var r=e.deps,n=(t&ie)!==0;if(r!==null){var s,a,i=(t&St)!==0,l=n&&O!==null&&!He,u=r.length;if(i||l){var o=e,h=o.parent;for(s=0;s<u;s++)a=r[s],(i||!((f=a==null?void 0:a.reactions)!=null&&f.includes(o)))&&(a.reactions??(a.reactions=[])).push(o);i&&(o.f^=St),l&&h!==null&&!(h.f&ie)&&(o.f^=ie)}for(s=0;s<u;s++)if(a=r[s],Nt(a)&&on(a),a.wv>e.wv)return!0}(!n||O!==null&&!He)&&be(e,le)}return!1}function pn(e,t,r=!0){var n=e.reactions;if(n!==null)for(var s=0;s<n.length;s++){var a=n[s];z!=null&&z[1].includes(e)&&z[0]===q||(a.f&de?pn(a,t,!1):t===a&&(r?be(a,Le):a.f&le&&be(a,Ge),br(a)))}}function bn(e){var d;var t=X,r=ae,n=ue,s=q,a=He,i=z,l=I,u=Ee,o=e.f;X=null,ae=0,ue=null,He=(o&ie)!==0&&(Ee||!Xe||q===null),q=o&(Fe|ot)?null:e,z=null,Sr(e.ctx),Ee=!1,qt++,e.f|=Qt;try{var h=(0,e.fn)(),f=e.deps;if(X!==null){var c;if(Rt(e,ae),f!==null&&ae>0)for(f.length=ae+X.length,c=0;c<X.length;c++)f[ae+c]=X[c];else e.deps=f=X;if(!He||o&de&&e.reactions!==null)for(c=ae;c<f.length;c++)((d=f[c]).reactions??(d.reactions=[])).push(e)}else f!==null&&ae<f.length&&(Rt(e,ae),f.length=ae);if(Tt()&&ue!==null&&!Ee&&f!==null&&!(e.f&(de|Ge|Le)))for(c=0;c<ue.length;c++)pn(ue[c],e);return s!==null&&s!==e&&(qt++,ue!==null&&(n===null?n=ue:n.push(...ue))),h}catch(v){Ts(v)}finally{X=t,ae=r,ue=n,q=s,He=a,z=i,Sr(l),Ee=u,e.f^=Qt}}function xs(e,t){let r=t.reactions;if(r!==null){var n=es.call(r,e);if(n!==-1){var s=r.length-1;s===0?r=t.reactions=null:(r[n]=r[s],r.pop())}}r===null&&t.f&de&&(X===null||!X.includes(t))&&(be(t,Ge),t.f&(ie|St)||(t.f^=St),an(t),Rt(t,0))}function Rt(e,t){var r=e.deps;if(r!==null)for(var n=t;n<r.length;n++)xs(e,r[n])}function Mt(e){var t=e.f;if(!(t&ir)){be(e,le);var r=O,n=Xe;O=e,Xe=!0;try{t&sr?Ms(e):En(e),Cn(e);var s=bn(e);e.teardown=typeof s=="function"?s:null,e.wv=_n;var a;Dr&&gs&&e.f&Le&&e.deps}finally{Xe=n,O=r}}}function Ss(){try{cs()}catch(e){if(Ct!==null)hn(e,Ct);else throw e}}function wn(){var e=Xe;try{var t=0;for(Xe=!0;ht.length>0;){t++>1e3&&Ss();var r=ht,n=r.length;ht=[];for(var s=0;s<n;s++){var a=Rs(r[s]);qs(a)}wt.clear()}}finally{mt=!1,Xe=e,Ct=null}}function qs(e){var t=e.length;if(t!==0)for(var r=0;r<t;r++){var n=e[r];n.f&(ir|Oe)||Nt(n)&&(Mt(n),n.deps===null&&n.first===null&&n.nodes_start===null&&(n.teardown===null?kn(n):n.fn=null))}}function br(e){mt||(mt=!0,queueMicrotask(wn));for(var t=Ct=e;t.parent!==null;){t=t.parent;var r=t.f;if(r&(ot|Fe)){if(!(r&le))return;t.f^=le}}ht.push(t)}function Rs(e){for(var t=[],r=e;r!==null;){var n=r.f,s=(n&(Fe|ot))!==0,a=s&&(n&le)!==0;if(!a&&!(n&Oe)){n&Gr?t.push(r):s?r.f^=le:Nt(r)&&Mt(r);var i=r.first;if(i!==null){r=i;continue}}var l=r.parent;for(r=r.next;r===null&&l!==null;)r=l.next,l=l.parent}return t}function jt(e){for(var t;;){if(is(),ht.length===0)return mt=!1,Ct=null,t;mt=!0,wn()}}function _(e){var t=e.f,r=(t&de)!==0;if(q!==null&&!Ee){if(!(z!=null&&z[1].includes(e))||z[0]!==q){var n=q.deps;e.rv<qt&&(e.rv=qt,X===null&&n!==null&&n[ae]===e?ae++:X===null?X=[e]:(!He||!X.includes(e))&&X.push(e))}}else if(r&&e.deps===null&&e.effects===null){var s=e,a=s.parent;a!==null&&!(a.f&ie)&&(s.f^=ie)}return r&&(s=e,Nt(s)&&on(s)),ct&&wt.has(e)?wt.get(e):e.v}function N(e){var t=Ee;try{return Ee=!0,e()}finally{Ee=t}}const Os=-7169;function be(e,t){e.f=e.f&Os|t}function j(e){if(!(typeof e!="object"||!e||e instanceof EventTarget)){if($e in e)tr(e);else if(!Array.isArray(e))for(let t in e){const r=e[t];typeof r=="object"&&r&&$e in r&&tr(r)}}}function tr(e,t=new Set){if(typeof e=="object"&&e!==null&&!(e instanceof EventTarget)&&!t.has(e)){t.add(e),e instanceof Date&&e.getTime();for(let n in e)try{tr(e[n],t)}catch{}const r=ur(e);if(r!==Object.prototype&&r!==Array.prototype&&r!==Map.prototype&&r!==Set.prototype&&r!==Date.prototype){const n=Xr(r);for(let s in n){const a=n[s].get;if(a)try{a.call(e)}catch{}}}}}function yn(e){O===null&&q===null&&us(),q!==null&&q.f&ie&&O===null&&os(),ct&&ls()}function Ls(e,t){var r=t.last;r===null?t.last=t.first=e:(r.next=e,e.prev=r,t.last=e)}function ft(e,t,r,n=!0){var s=O,a={ctx:I,deps:null,nodes_start:null,nodes_end:null,f:e|Le,first:null,fn:t,last:null,next:null,parent:s,prev:null,teardown:null,transitions:null,wv:0};if(r)try{Mt(a),a.f|=Kr}catch(u){throw Ze(a),u}else t!==null&&br(a);var i=r&&a.deps===null&&a.first===null&&a.nodes_start===null&&a.teardown===null&&(a.f&(zr|ar))===0;if(!i&&n&&(s!==null&&Ls(a,s),q!==null&&q.f&de)){var l=q;(l.effects??(l.effects=[])).push(a)}return a}function mn(e){const t=ft(Pt,null,!1);return be(t,le),t.teardown=e,t}function rr(e){yn();var t=O!==null&&(O.f&Fe)!==0&&I!==null&&!I.m;if(t){var r=I;(r.e??(r.e=[])).push({fn:e,effect:O,reaction:q})}else{var n=wr(e);return n}}function Ps(e){return yn(),Dt(e)}function Fs(e){const t=ft(ot,e,!0);return(r={})=>new Promise(n=>{r.outro?Ot(t,()=>{Ze(t),n(void 0)}):(Ze(t),n(void 0))})}function wr(e){return ft(Gr,e,!1)}function Vs(e,t){var r=I,n={effect:null,ran:!1};r.l.r1.push(n),n.effect=Dt(()=>{e(),!n.ran&&(n.ran=!0,D(r.l.r2,!0),N(t))})}function Is(){var e=I;Dt(()=>{if(_(e.l.r2)){for(var t of e.l.r1){var r=t.effect;r.f&le&&be(r,Ge),Nt(r)&&Mt(r),t.ran=!1}e.l.r2.v=!1}})}function Dt(e){return ft(Pt,e,!0)}function _e(e,t=[],r=Ft){const n=t.map(r);return yr(()=>e(...n.map(_)))}function yr(e,t=0){return ft(Pt|sr|t,e,!0)}function Et(e,t=!0){return ft(Pt|Fe,e,!0,t)}function Cn(e){var t=e.teardown;if(t!==null){const r=ct,n=q;Rr(!0),ke(null);try{t.call(null)}finally{Rr(r),ke(n)}}}function En(e,t=!1){var r=e.first;for(e.first=e.last=null;r!==null;){var n=r.next;r.f&ot?r.parent=null:Ze(r,t),r=n}}function Ms(e){for(var t=e.first;t!==null;){var r=t.next;t.f&Fe||Ze(t),t=r}}function Ze(e,t=!0){var r=!1;(t||e.f&Xn)&&e.nodes_start!==null&&e.nodes_end!==null&&(js(e.nodes_start,e.nodes_end),r=!0),En(e,t&&!r),Rt(e,0),be(e,ir);var n=e.transitions;if(n!==null)for(const a of n)a.stop();Cn(e);var s=e.parent;s!==null&&s.first!==null&&kn(e),e.next=e.prev=e.teardown=e.ctx=e.deps=e.fn=e.nodes_start=e.nodes_end=null}function js(e,t){for(;e!==null;){var r=e===t?null:Me(e);e.remove(),e=r}}function kn(e){var t=e.parent,r=e.prev,n=e.next;r!==null&&(r.next=n),n!==null&&(n.prev=r),t!==null&&(t.first===e&&(t.first=n),t.last===e&&(t.last=r))}function Ot(e,t){var r=[];mr(e,r,!0),An(r,()=>{Ze(e),t&&t()})}function An(e,t){var r=e.length;if(r>0){var n=()=>--r||t();for(var s of e)s.out(n)}else t()}function mr(e,t,r){if(!(e.f&Oe)){if(e.f^=Oe,e.transitions!==null)for(const i of e.transitions)(i.is_global||r)&&t.push(i);for(var n=e.first;n!==null;){var s=n.next,a=(n.f&lr)!==0||(n.f&Fe)!==0;mr(n,t,a?r:!1),n=s}}}function Lt(e){Tn(e,!0)}function Tn(e,t){if(e.f&Oe){e.f^=Oe;for(var r=e.first;r!==null;){var n=r.next,s=(r.f&lr)!==0||(r.f&Fe)!==0;Tn(r,s?t:!1),r=n}if(e.transitions!==null)for(const a of e.transitions)(a.is_global||t)&&a.in()}}function Bs(e){L&&Ue(e)!==null&&pr(e)}let Or=!1;function Nn(){Or||(Or=!0,document.addEventListener("reset",e=>{Promise.resolve().then(()=>{var t;if(!e.defaultPrevented)for(const r of e.target.elements)(t=r.__on_r)==null||t.call(r)})},{capture:!0}))}function Dn(e){var t=q,r=O;ke(null),Ye(null);try{return e()}finally{ke(t),Ye(r)}}function Hs(e,t,r,n=r){e.addEventListener(t,()=>Dn(r));const s=e.__on_r;s?e.__on_r=()=>{s(),n(!0)}:e.__on_r=()=>n(!0),Nn()}const Us=new Set,Lr=new Set;function Ys(e,t,r,n={}){function s(a){if(n.capture||vt.call(t,a),!a.cancelBubble)return Dn(()=>r==null?void 0:r.call(this,a))}return e.startsWith("pointer")||e.startsWith("touch")||e==="wheel"?cr(()=>{t.addEventListener(e,s,n)}):t.addEventListener(e,s,n),s}function R(e,t,r,n,s){var a={capture:n,passive:s},i=Ys(e,t,r,a);(t===document.body||t===window||t===document||t instanceof HTMLMediaElement)&&mn(()=>{t.removeEventListener(e,i,a)})}function vt(e){var A;var t=this,r=t.ownerDocument,n=e.type,s=((A=e.composedPath)==null?void 0:A.call(e))||[],a=s[0]||e.target,i=0,l=e.__root;if(l){var u=s.indexOf(l);if(u!==-1&&(t===document||t===window)){e.__root=t;return}var o=s.indexOf(t);if(o===-1)return;u<=o&&(i=u)}if(a=s[i]||e.target,a!==t){$r(e,"currentTarget",{configurable:!0,get(){return a||r}});var h=q,f=O;ke(null),Ye(null);try{for(var c,d=[];a!==null;){var v=a.assignedSlot||a.parentNode||a.host||null;try{var w=a["__"+n];if(w!=null&&(!a.disabled||e.target===a))if(At(w)){var[g,...E]=w;g.apply(a,[e,...E])}else w.call(a,e)}catch(b){c?d.push(b):c=b}if(e.cancelBubble||v===t||v===null)break;a=v}if(c){for(let b of d)queueMicrotask(()=>{throw b});throw c}}finally{e.__root=t,delete e.currentTarget,ke(h),Ye(f)}}}function Zs(e){var t=document.createElement("template");return t.innerHTML=e.replaceAll("<!>","<!---->"),t.content}function it(e,t){var r=O;r.nodes_start===null&&(r.nodes_start=e,r.nodes_end=t)}function G(e,t){var r=(t&Cs)!==0,n=(t&Es)!==0,s,a=!e.startsWith("<!>");return()=>{if(L)return it(V,null),V;s===void 0&&(s=Zs(a?e:"<!>"+e),r||(s=Ue(s)));var i=n||fn?document.importNode(s,!0):s.cloneNode(!0);if(r){var l=Ue(i),u=i.lastChild;it(l,u)}else it(i,i);return i}}function Gs(){if(L)return it(V,null),V;var e=document.createDocumentFragment(),t=document.createComment(""),r=lt();return e.append(t,r),it(t,r),e}function Y(e,t){if(L){O.nodes_end=V,It();return}e!==null&&e.before(t)}const Ks=["touchstart","touchmove"];function zs(e){return Ks.includes(e)}function fe(e,t){var r=t==null?"":typeof t=="object"?t+"":t;r!==(e.__t??(e.__t=e.nodeValue))&&(e.__t=r,e.nodeValue=r+"")}function xn(e,t){return Sn(e,t)}function Qs(e,t){Jt(),t.intro=t.intro??!1;const r=t.target,n=L,s=V;try{for(var a=Ue(r);a&&(a.nodeType!==_t||a.data!==hr);)a=Me(a);if(!a)throw at;Re(!0),ge(a),It();const i=Sn(e,{...t,anchor:a});if(V===null||V.nodeType!==_t||V.data!==gr)throw Vt(),at;return Re(!1),i}catch(i){if(i===at)return t.recover===!1&&fs(),Jt(),pr(r),Re(!1),xn(e,t);throw i}finally{Re(n),ge(s)}}const Je=new Map;function Sn(e,{target:t,anchor:r,props:n={},events:s,context:a,intro:i=!0}){Jt();var l=new Set,u=f=>{for(var c=0;c<f.length;c++){var d=f[c];if(!l.has(d)){l.add(d);var v=zs(d);t.addEventListener(d,vt,{passive:v});var w=Je.get(d);w===void 0?(document.addEventListener(d,vt,{passive:v}),Je.set(d,1)):Je.set(d,w+1)}}};u(or(Us)),Lr.add(u);var o=void 0,h=Fs(()=>{var f=r??t.appendChild(lt());return Et(()=>{if(a){Ve({});var c=I;c.c=a}s&&(n.$$events=s),L&&it(f,null),o=e(f,n)||{},L&&(O.nodes_end=V),a&&Ie()}),()=>{var v;for(var c of l){t.removeEventListener(c,vt);var d=Je.get(c);--d===0?(document.removeEventListener(c,vt),Je.delete(c)):Je.set(c,d)}Lr.delete(u),f!==r&&((v=f.parentNode)==null||v.removeChild(f))}});return nr.set(o,h),o}let nr=new WeakMap;function Ws(e,t){const r=nr.get(e);return r?(nr.delete(e),r(t)):Promise.resolve()}function $s(e){return function(...t){var r=t[0];return r.stopPropagation(),e==null?void 0:e.apply(this,t)}}function Xs(e){return function(...t){var r=t[0];return r.preventDefault(),e==null?void 0:e.apply(this,t)}}function Ke(e){return new Js(e)}var Se,ce;class Js{constructor(t){Yt(this,Se);Yt(this,ce);var a;var r=new Map,n=(i,l)=>{var u=ee(l,!1,!1);return r.set(i,u),u};const s=new Proxy({...t.props||{},$$events:{}},{get(i,l){return _(r.get(l)??n(l,Reflect.get(i,l)))},has(i,l){return l===Qr?!0:(_(r.get(l)??n(l,Reflect.get(i,l))),Reflect.has(i,l))},set(i,l,u){return D(r.get(l)??n(l,u),u),Reflect.set(i,l,u)}});Zt(this,ce,(t.hydrate?Qs:xn)(t.component,{target:t.target,anchor:t.anchor,props:s,context:t.context,intro:t.intro??!1,recover:t.recover})),(!((a=t==null?void 0:t.props)!=null&&a.$$host)||t.sync===!1)&&jt(),Zt(this,Se,s.$$events);for(const i of Object.keys(te(this,ce)))i==="$set"||i==="$destroy"||i==="$on"||$r(this,i,{get(){return te(this,ce)[i]},set(l){te(this,ce)[i]=l},enumerable:!0});te(this,ce).$set=i=>{Object.assign(s,i)},te(this,ce).$destroy=()=>{Ws(te(this,ce))}}$set(t){te(this,ce).$set(t)}$on(t,r){te(this,Se)[t]=te(this,Se)[t]||[];const n=(...s)=>r.call(this,...s);return te(this,Se)[t].push(n),()=>{te(this,Se)[t]=te(this,Se)[t].filter(s=>s!==n)}}$destroy(){te(this,ce).$destroy()}}Se=new WeakMap,ce=new WeakMap;const ea="5";var Yr;typeof window<"u"&&((Yr=window.__svelte??(window.__svelte={})).v??(Yr.v=new Set)).add(ea);ps();function Bt(e){I===null&&sn(),ut&&I.l!==null?ra(I).m.push(e):rr(()=>{const t=N(e);if(typeof t=="function")return t})}function ta(e,t,{bubbles:r=!1,cancelable:n=!1}={}){return new CustomEvent(e,{detail:t,bubbles:r,cancelable:n})}function Cr(){const e=I;return e===null&&sn(),(t,r,n)=>{var a;const s=(a=e.s.$$events)==null?void 0:a[t];if(s){const i=At(s)?s.slice():[s],l=ta(t,r,n);for(const u of i)u.call(e.x,l);return!l.defaultPrevented}return!0}}function ra(e){var t=e.l;return t.u??(t.u={a:[],b:[],m:[]})}function pe(e,t,[r,n]=[0,0]){L&&r===0&&It();var s=e,a=null,i=null,l=re,u=r>0?lr:0,o=!1;const h=(c,d=!0)=>{o=!0,f(d,c)},f=(c,d)=>{if(l===(l=c))return;let v=!1;if(L&&n!==-1){if(r===0){const g=cn(s);g===hr?n=0:g===_r?n=1/0:(n=parseInt(g.substring(1)),n!==n&&(n=l?1/0:-1))}const w=n>r;!!l===w&&(s=Xt(),ge(s),Re(!1),v=!0,n=-1)}l?(a?Lt(a):d&&(a=Et(()=>d(s))),i&&Ot(i,()=>{i=null})):(i?Lt(i):d&&(i=Et(()=>d(s,[r+1,n]))),a&&Ot(a,()=>{a=null})),v&&Re(!0)};yr(()=>{o=!1,t(h),o||f(null,null)},u),L&&(s=V)}function na(e,t){return t}function sa(e,t,r,n){for(var s=[],a=t.length,i=0;i<a;i++)mr(t[i].e,s,!0);var l=a>0&&s.length===0&&r!==null;if(l){var u=r.parentNode;pr(u),u.append(r),n.clear(),Be(e,t[0].prev,t[a-1].next)}An(s,()=>{for(var o=0;o<a;o++){var h=t[o];l||(n.delete(h.k),Be(e,h.prev,h.next)),Ze(h.e,!l)}})}function Er(e,t,r,n,s,a=null){var i=e,l={flags:t,items:new Map,first:null},u=(t&nn)!==0;if(u){var o=e;i=L?ge(Ue(o)):o.appendChild(lt())}L&&It();var h=null,f=!1,c=Pe(()=>{var d=r();return At(d)?d:d==null?[]:or(d)});yr(()=>{var d=_(c),v=d.length;if(f&&v===0)return;f=v===0;let w=!1;if(L){var g=cn(i)===_r;g!==(v===0)&&(i=Xt(),ge(i),Re(!1),w=!0)}if(L){for(var E=null,A,b=0;b<v;b++){if(V.nodeType===_t&&V.data===gr){i=V,w=!0,Re(!1);break}var C=d[b],p=n(C,b);A=qn(V,l,E,null,C,p,b,s,t,r),l.items.set(p,A),E=A}v>0&&ge(Xt())}L||aa(d,l,i,s,t,n,r),a!==null&&(v===0?h?Lt(h):h=Et(()=>a(i)):h!==null&&Ot(h,()=>{h=null})),w&&Re(!0),_(c)}),L&&(i=V)}function aa(e,t,r,n,s,a,i){var Ae,Te,Ne,T;var l=(s&bs)!==0,u=(s&(dr|vr))!==0,o=e.length,h=t.items,f=t.first,c=f,d,v=null,w,g=[],E=[],A,b,C,p;if(l)for(p=0;p<o;p+=1)A=e[p],b=a(A,p),C=h.get(b),C!==void 0&&((Ae=C.a)==null||Ae.measure(),(w??(w=new Set)).add(C));for(p=0;p<o;p+=1){if(A=e[p],b=a(A,p),C=h.get(b),C===void 0){var B=c?c.e.nodes_start:r;v=qn(B,t,v,v===null?t.first:v.next,A,b,p,n,s,i),h.set(b,v),g=[],E=[],c=v.next;continue}if(u&&ia(C,A,p,s),C.e.f&Oe&&(Lt(C.e),l&&((Te=C.a)==null||Te.unfix(),(w??(w=new Set)).delete(C))),C!==c){if(d!==void 0&&d.has(C)){if(g.length<E.length){var P=E[0],F;v=P.prev;var $=g[0],Z=g[g.length-1];for(F=0;F<g.length;F+=1)Pr(g[F],P,r);for(F=0;F<E.length;F+=1)d.delete(E[F]);Be(t,$.prev,Z.next),Be(t,v,$),Be(t,Z,P),c=P,v=Z,p-=1,g=[],E=[]}else d.delete(C),Pr(C,c,r),Be(t,C.prev,C.next),Be(t,C,v===null?t.first:v.next),Be(t,v,C),v=C;continue}for(g=[],E=[];c!==null&&c.k!==b;)c.e.f&Oe||(d??(d=new Set)).add(c),E.push(c),c=c.next;if(c===null)continue;C=c}g.push(C),v=C,c=C.next}if(c!==null||d!==void 0){for(var Q=d===void 0?[]:or(d);c!==null;)c.e.f&Oe||Q.push(c),c=c.next;var se=Q.length;if(se>0){var we=s&nn&&o===0?r:null;if(l){for(p=0;p<se;p+=1)(Ne=Q[p].a)==null||Ne.measure();for(p=0;p<se;p+=1)(T=Q[p].a)==null||T.fix()}sa(t,Q,we,h)}}l&&cr(()=>{var M;if(w!==void 0)for(C of w)(M=C.a)==null||M.apply()}),O.first=t.first&&t.first.e,O.last=v&&v.e}function ia(e,t,r,n){n&dr&&Wt(e.v,t),n&vr?Wt(e.i,r):e.i=r}function qn(e,t,r,n,s,a,i,l,u,o){var h=(u&dr)!==0,f=(u&ws)===0,c=h?f?ee(s,!1,!1):yt(s):s,d=u&vr?yt(i):i,v={i:d,v:c,k:a,a:null,e:null,prev:r,next:n};try{return v.e=Et(()=>l(e,c,d,o),L),v.e.prev=r&&r.e,v.e.next=n&&n.e,r===null?t.first=v:(r.next=v,r.e.next=v.e),n!==null&&(n.prev=v,n.e.prev=v.e),v}finally{}}function Pr(e,t,r){for(var n=e.next?e.next.e.nodes_start:r,s=t?t.e.nodes_start:r,a=e.e.nodes_start;a!==n;){var i=Me(a);s.before(a),a=i}}function Be(e,t,r){t===null?e.first=r:(t.next=r,t.e.next=r&&r.e),r!==null&&(r.prev=t,r.e.prev=t&&t.e)}const Fr=[...` 	
\r\f \v\uFEFF`];function la(e,t,r){var n=e==null?"":""+e;if(t&&(n=n?n+" "+t:t),r){for(var s in r)if(r[s])n=n?n+" "+s:s;else if(n.length)for(var a=s.length,i=0;(i=n.indexOf(s,i))>=0;){var l=i+a;(i===0||Fr.includes(n[i-1]))&&(l===n.length||Fr.includes(n[l]))?n=(i===0?"":n.substring(0,i))+n.substring(l+1):i=l}}return n===""?null:n}function ne(e,t,r,n,s,a){var i=e.__className;if(L||i!==r||i===void 0){var l=la(r,n,a);(!L||l!==e.getAttribute("class"))&&(l==null?e.removeAttribute("class"):e.className=l),e.__className=r}else if(a&&s!==a)for(var u in a){var o=!!a[u];(s==null||o!==!!s[u])&&e.classList.toggle(u,o)}return a}const oa=Symbol("is custom element"),ua=Symbol("is html");function ca(e){if(L){var t=!1,r=()=>{if(!t){if(t=!0,e.hasAttribute("value")){var n=e.value;J(e,"value",null),e.value=n}if(e.hasAttribute("checked")){var s=e.checked;J(e,"checked",null),e.checked=s}}};e.__on_r=r,as(r),Nn()}}function fa(e,t){var r=Rn(e);r.value===(r.value=t??void 0)||e.value===t&&(t!==0||e.nodeName!=="PROGRESS")||(e.value=t??"")}function J(e,t,r,n){var s=Rn(e);L&&(s[t]=e.getAttribute(t),t==="src"||t==="srcset"||t==="href"&&e.nodeName==="LINK")||s[t]!==(s[t]=r)&&(t==="loading"&&(e[Jn]=r),r==null?e.removeAttribute(t):typeof r!="string"&&da(e).includes(t)?e[t]=r:e.setAttribute(t,r))}function Rn(e){return e.__attributes??(e.__attributes={[oa]:e.nodeName.includes("-"),[ua]:e.namespaceURI===ks})}var Vr=new Map;function da(e){var t=Vr.get(e.nodeName);if(t)return t;Vr.set(e.nodeName,t=[]);for(var r,n=e,s=Element.prototype;s!==n;){r=Xr(n);for(var a in r)r[a].set&&t.push(a);n=ur(n)}return t}function va(e,t,r=t){var n=Tt();Hs(e,"input",s=>{var a=s?e.defaultValue:e.value;if(a=Kt(e)?zt(a):a,r(a),n&&a!==(a=t())){var i=e.selectionStart,l=e.selectionEnd;e.value=a??"",l!==null&&(e.selectionStart=i,e.selectionEnd=Math.min(l,e.value.length))}}),(L&&e.defaultValue!==e.value||N(t)==null&&e.value)&&r(Kt(e)?zt(e.value):e.value),Dt(()=>{var s=t();Kt(e)&&s===zt(e.value)||e.type==="date"&&!s&&!e.value||s!==e.value&&(e.value=s??"")})}function Kt(e){var t=e.type;return t==="number"||t==="range"}function zt(e){return e===""?null:+e}function Ir(e,t){return e===t||(e==null?void 0:e[$e])===t}function ha(e={},t,r,n){return wr(()=>{var s,a;return Dt(()=>{s=a,a=[],N(()=>{e!==r(...a)&&(t(e,...a),s&&Ir(r(...s),e)&&t(null,...s))})}),()=>{cr(()=>{a&&Ir(r(...a),e)&&t(null,...a)})}}),e}function ze(e=!1){const t=I,r=t.l.u;if(!r)return;let n=()=>j(t.s);if(e){let s=0,a={};const i=Ft(()=>{let l=!1;const u=t.s;for(const o in u)u[o]!==a[o]&&(a[o]=u[o],l=!0);return l&&s++,s});n=()=>_(i)}r.b.length&&Ps(()=>{Mr(t,n),gt(r.b)}),rr(()=>{const s=N(()=>r.m.map(ns));return()=>{for(const a of s)typeof a=="function"&&a()}}),r.a.length&&rr(()=>{Mr(t,n),gt(r.a)})}function Mr(e,t){if(e.l.s)for(const r of e.l.s)_(r);t()}function _a(e,t){var a;var r=(a=e.$$events)==null?void 0:a[t.type],n=At(r)?r.slice():r==null?[]:[r];for(var s of n)s.call(this,t)}function Qe(e,t,r){var n;e.$$events||(e.$$events={}),(n=e.$$events)[t]||(n[t]=[]),e.$$events[t].push(r)}function We(e){for(var t in e)t in this&&(this[t]=e[t])}function ga(e,t,r){if(e==null)return t(void 0),r&&r(void 0),st;const n=N(()=>e.subscribe(t,r));return n.unsubscribe?()=>n.unsubscribe():n}const et=[];function pa(e,t){return{subscribe:dt(e,t).subscribe}}function dt(e,t=st){let r=null;const n=new Set;function s(l){if(rn(e,l)&&(e=l,r)){const u=!et.length;for(const o of n)o[1](),et.push(o,e);if(u){for(let o=0;o<et.length;o+=2)et[o][0](et[o+1]);et.length=0}}}function a(l){s(l(e))}function i(l,u=st){const o=[l,u];return n.add(o),n.size===1&&(r=t(s,a)||st),l(e),()=>{n.delete(o),n.size===0&&r&&(r(),r=null)}}return{set:s,update:a,subscribe:i}}function ve(e,t,r){const n=!Array.isArray(e),s=n?[e]:e;if(!s.every(Boolean))throw new Error("derived() expects stores as input, got a falsy value");const a=t.length<2;return pa(r,(i,l)=>{let u=!1;const o=[];let h=0,f=st;const c=()=>{if(h)return;f();const v=t(n?o[0]:o,i,l);a?i(v):f=typeof v=="function"?v:st},d=s.map((v,w)=>ga(v,g=>{o[w]=g,h&=~(1<<w),u&&c()},()=>{h|=1<<w}));return u=!0,c(),function(){gt(d),f(),u=!1}})}let xt=!1;function ba(e){var t=xt;try{return xt=!1,[e(),xt]}finally{xt=t}}function jr(e){var t;return((t=e.ctx)==null?void 0:t.d)??!1}function kr(e,t,r,n){var C;var s=!ut||(r&ys)!==0,a=(r&ms)!==0,i=!1,l;[l,i]=ba(()=>e[t]);var u=$e in e||Qr in e,o=(((C=nt(e,t))==null?void 0:C.set)??(u&&t in e&&(p=>e[t]=p)))||void 0,h=n,f=!0,c=!1,d=()=>(c=!0,f&&(f=!1,h=n),h);l===void 0&&n!==void 0&&(o&&s&&ds(),l=d(),o&&o(l));var v;if(s)v=()=>{var p=e[t];return p===void 0?d():(f=!0,c=!1,p)};else{var w=Pe(()=>e[t]);w.f|=$n,v=()=>{var p=_(w);return p!==void 0&&(h=void 0),p===void 0?h:p}}if(o){var g=e.$$legacy;return function(p,B){return arguments.length>0?((!s||!B||g||i)&&o(B?v():p),p):v()}}var E=!1,A=ee(l),b=Ft(()=>{var p=v(),B=_(A);return E?(E=!1,B):A.v=p});return _(b),b.equals=fr,function(p,B){if(arguments.length>0){const P=B?_(b):s&&a?rt(p):p;if(!b.equals(P)){if(E=!0,D(A,P),c&&h!==void 0&&(h=P),jr(b))return p;N(()=>_(b))}return p}return jr(b)?b.v:_(b)}}const kt=dt("cards"),On={currentView:"cards",cardView:{selectedCards:[],gridColumns:3},flashNotesView:{activeCategory:"all"}},me=dt(On),wa={switchView:e=>{kt.set(e),me.update(t=>({...t,currentView:e}))},selectCard:e=>{me.update(t=>({...t,cardView:{...t.cardView,selectedCards:[e]}}))},selectMultipleCards:e=>{me.update(t=>({...t,cardView:{...t.cardView,selectedCards:e}}))},toggleCardSelection:e=>{me.update(t=>{const r=t.cardView.selectedCards,n=r.includes(e);return{...t,cardView:{...t.cardView,selectedCards:n?r.filter(s=>s!==e):[...r,e]}}})},clearCardSelection:()=>{me.update(e=>({...e,cardView:{...e.cardView,selectedCards:[]}}))},setGridColumns:e=>{me.update(t=>({...t,cardView:{...t.cardView,gridColumns:Math.max(1,Math.min(6,e))}}))},setActiveCategory:e=>{me.update(t=>({...t,flashNotesView:{...t.flashNotesView,activeCategory:e}}))},reset:()=>{me.set(On),kt.set("cards")},getCurrentState:()=>new Promise(e=>{const t=me.subscribe(r=>{t(),e(r)})})},ya=async()=>{const e=await wa.getCurrentState();console.log("Saving view state:",e)};let Br;me.subscribe(()=>{clearTimeout(Br),Br=setTimeout(ya,1e3)});var ma=G('<header class="plugin-header svelte-wr4rcv"><h1 class="plugin-title svelte-wr4rcv">Zettelkasten</h1> <nav class="view-controls svelte-wr4rcv"><button title="闪念笔记" aria-label="切换到闪念笔记视图"><i class="fas fa-lightbulb" aria-hidden="true"></i></button> <button title="卡片系统" aria-label="切换到卡片系统视图"><i class="fas fa-th-large" aria-hidden="true"></i></button></nav></header>');function Ln(e,t){if(new.target)return Ke({component:Ln,...e});Ve(t,!1);let r=ee("cards");kt.subscribe(h=>{D(r,h)});function n(h){kt.set(h)}ze();var s=ma(),a=k(m(s),2),i=m(a);let l;var u=k(i,2);let o;return y(a),y(s),_e((h,f)=>{l=ne(i,1,"control-btn svelte-wr4rcv",null,l,h),o=ne(u,1,"control-btn svelte-wr4rcv",null,o,f)},[()=>({active:_(r)==="flash-notes"}),()=>({active:_(r)==="cards"})],Pe),R("click",i,()=>n("flash-notes")),R("click",u,()=>n("cards")),Y(e,s),Ie({$set:We,$on:(h,f)=>Qe(t,h,f)})}var Ca=G('<p class="card-description svelte-cucewh"> </p>'),Ea=G('<span class="card-tag svelte-cucewh"> </span>'),ka=G('<div class="card-tags svelte-cucewh"></div>'),Aa=G('<span class="connection-count svelte-cucewh" title="连接数量"> </span> <i class="fas fa-link"></i>',1),Ta=G('<span class="connection-count svelte-cucewh">0</span> <i class="fas fa-unlink"></i>',1),Na=G('<div tabindex="0" role="button"><div></div> <header class="card-header svelte-cucewh"><div class="card-id svelte-cucewh"> </div> <div class="card-actions svelte-cucewh"><button class="card-action-btn edit svelte-cucewh" title="编辑卡片" aria-label="编辑卡片"><i class="fas fa-edit"></i></button> <button class="card-action-btn delete svelte-cucewh" title="删除卡片" aria-label="删除卡片"><i class="fas fa-trash"></i></button></div></header> <div class="card-content svelte-cucewh"><h3 class="card-title svelte-cucewh"> </h3> <!> <!></div> <footer class="card-footer svelte-cucewh"><div class="card-meta svelte-cucewh"><span title="创建时间"><i class="fas fa-clock"></i> </span></div> <div class="card-connections svelte-cucewh"><!></div></footer></div>');function Pn(e,t){if(new.target)return Ke({component:Pn,...e});Ve(t,!1);let r=kr(t,"card",12);const n=Cr();function s(){n("click",r())}function a(T){T.stopPropagation(),n("edit",r())}function i(T){T.stopPropagation(),n("delete",r())}function l(T){return new Intl.DateTimeFormat("zh-CN",{year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(T)}function u(T){return T||"blue"}ze();var o=Na();let h;var f=m(o),c=k(f,2),d=m(c),v=m(d);y(d);var w=k(d,2),g=m(w),E=k(g,2);y(w),y(c);var A=k(c,2),b=m(A),C=m(b,!0);y(b);var p=k(b,2);{var B=T=>{var M=Ca(),S=m(M,!0);y(M),_e(()=>fe(S,(j(r()),N(()=>r().content)))),Y(T,M)};pe(p,T=>{j(r()),N(()=>r().content)&&T(B)})}var P=k(p,2);{var F=T=>{var M=ka();Er(M,5,()=>(j(r()),N(()=>r().tags)),na,(S,ye)=>{var x=Ea(),K=m(x);y(x),_e(()=>fe(K,`#${_(ye)??""}`)),Y(S,x)}),y(M),Y(T,M)};pe(P,T=>{j(r()),N(()=>r().tags&&r().tags.length>0)&&T(F)})}y(A);var $=k(A,2),Z=m($),Q=m(Z),se=k(m(Q));y(Q),y(Z);var we=k(Z,2),Ae=m(we);{var Te=T=>{var M=Aa(),S=er(M),ye=m(S,!0);y(S),$t(2),_e(()=>fe(ye,(j(r()),N(()=>r().connections.length)))),Y(T,M)},Ne=T=>{var M=Ta();$t(2),Y(T,M)};pe(Ae,T=>{j(r()),N(()=>r().connections&&r().connections.length>0)?T(Te):T(Ne,!1)})}return y(we),y($),y(o),_e((T,M,S)=>{h=ne(o,1,"zettelkasten-card svelte-cucewh",null,h,T),J(o,"aria-label",(j(r()),N(()=>`卡片: ${r().title}`))),ne(f,1,`color-indicator ${M??""}`,"svelte-cucewh"),fe(v,`#${j(r()),N(()=>r().id)??""}`),fe(C,(j(r()),N(()=>r().title))),fe(se,` ${S??""}`)},[()=>({selected:r().selected,archived:r().archived}),()=>(j(r()),N(()=>u(r().color))),()=>(j(r()),N(()=>l(r().createdAt)))],Pe),R("click",g,a),R("click",E,i),R("click",o,s),R("keydown",o,T=>T.key==="Enter"&&s()),Y(e,o),Ie({get card(){return r()},set card(T){r(T),jt()},$set:We,$on:(T,M)=>Qe(t,T,M)})}const Da={title:"",content:"",tags:[],color:"blue",connections:[],selected:!1,archived:!1},xa={content:"",category:"notes"},Fn={query:"",filters:{tags:[],colors:[]},sortBy:"updatedAt",sortOrder:"desc"},Sa={defaultView:"cards",autoSave:!0,maxRecentCards:10,enableConnections:!0,theme:"auto"};function qe(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}function Hr(e){const r=new Date().getTime()-e.getTime(),n=Math.floor(r/(1e3*60*60*24)),s=Math.floor(r/(1e3*60*60)),a=Math.floor(r/(1e3*60));return n>0?`${n}天前`:s>0?`${s}小时前`:a>0?`${a}分钟前`:"刚刚"}const U=dt([]),he={loadCards:async()=>{try{const e=[{id:qe(),title:"知识管理系统",content:"构建个人知识管理系统的核心要素包括：信息收集、整理、连接和应用。卢曼卡片盒方法提供了一个很好的框架。",tags:["知识管理","卢曼","方法论"],color:"blue",connections:[],createdAt:new Date(Date.now()-864e5),updatedAt:new Date(Date.now()-36e5)},{id:qe(),title:"Svelte 5 新特性",content:"Svelte 5 引入了 runes 系统，提供了更强大的响应式编程能力。$state、$derived 和 $effect 是核心概念。",tags:["Svelte","前端","响应式"],color:"green",connections:[],createdAt:new Date(Date.now()-1728e5),updatedAt:new Date(Date.now()-72e5)},{id:qe(),title:"新拟态设计",content:"新拟态设计（Neumorphism）结合了扁平化设计和拟物化设计的优点，通过柔和的阴影和高光创造出浮雕效果。",tags:["设计","UI","新拟态"],color:"purple",connections:[],createdAt:new Date(Date.now()-2592e5),updatedAt:new Date(Date.now()-108e5)}];U.set(e),console.log("Cards loaded:",e.length)}catch(e){console.error("Failed to load cards:",e)}},saveCards:async()=>{try{const e=await he.getAllCards();console.log("Saving cards:",e.length)}catch(e){console.error("Failed to save cards:",e)}},createCard:e=>{const t={...Da,...e,id:qe(),createdAt:new Date,updatedAt:new Date};return U.update(r=>[...r,t]),he.saveCards(),t.id},updateCard:(e,t)=>{U.update(r=>r.map(n=>n.id===e?{...n,...t,updatedAt:new Date}:n)),he.saveCards()},deleteCard:e=>{U.update(t=>t.filter(r=>r.id!==e)),he.saveCards()},getCard:e=>new Promise(t=>{const r=U.subscribe(n=>{r(),t(n.find(s=>s.id===e))})}),getAllCards:()=>new Promise(e=>{const t=U.subscribe(r=>{t(),e(r)})}),connectCards:(e,t)=>{U.update(r=>r.map(n=>n.id===e&&!n.connections.includes(t)?{...n,connections:[...n.connections,t],updatedAt:new Date}:n.id===t&&!n.connections.includes(e)?{...n,connections:[...n.connections,e],updatedAt:new Date}:n)),he.saveCards()},disconnectCards:(e,t)=>{U.update(r=>r.map(n=>n.id===e?{...n,connections:n.connections.filter(s=>s!==t),updatedAt:new Date}:n.id===t?{...n,connections:n.connections.filter(s=>s!==e),updatedAt:new Date}:n)),he.saveCards()},toggleArchive:e=>{U.update(t=>t.map(r=>r.id===e?{...r,archived:!r.archived,updatedAt:new Date}:r)),he.saveCards()},duplicateCard:async e=>new Promise(t=>{const r=U.subscribe(n=>{r();const s=n.find(a=>a.id===e);if(s){const a=he.createCard({...s,title:`${s.title} (副本)`,connections:[]});t(a)}else t(null)})}),getCardsByTag:e=>new Promise(t=>{const r=U.subscribe(n=>{r(),t(n.filter(s=>s.tags.includes(e)))})}),getCardsByColor:e=>new Promise(t=>{const r=U.subscribe(n=>{r(),t(n.filter(s=>s.color===e))})}),getConnectedCards:e=>new Promise(t=>{const r=U.subscribe(n=>{r();const s=n.find(a=>a.id===e);if(s){const a=n.filter(i=>s.connections.includes(i.id));t(a)}else t([])})})};ve(U,e=>e.filter(t=>!t.archived));ve(U,e=>e.filter(t=>t.archived));ve(U,e=>[...e].sort((t,r)=>r.updatedAt.getTime()-t.updatedAt.getTime()).slice(0,10));const H=dt(Fn),Ur={setQuery:e=>{H.update(t=>({...t,query:e.trim()}))},clearQuery:()=>{H.update(e=>({...e,query:""}))},addTagFilter:e=>{H.update(t=>({...t,filters:{...t.filters,tags:t.filters.tags.includes(e)?t.filters.tags:[...t.filters.tags,e]}}))},removeTagFilter:e=>{H.update(t=>({...t,filters:{...t.filters,tags:t.filters.tags.filter(r=>r!==e)}}))},toggleTagFilter:e=>{H.update(t=>{const r=t.filters.tags;return{...t,filters:{...t.filters,tags:r.includes(e)?r.filter(n=>n!==e):[...r,e]}}})},addColorFilter:e=>{H.update(t=>({...t,filters:{...t.filters,colors:t.filters.colors.includes(e)?t.filters.colors:[...t.filters.colors,e]}}))},removeColorFilter:e=>{H.update(t=>({...t,filters:{...t.filters,colors:t.filters.colors.filter(r=>r!==e)}}))},toggleColorFilter:e=>{H.update(t=>{const r=t.filters.colors;return{...t,filters:{...t.filters,colors:r.includes(e)?r.filter(n=>n!==e):[...r,e]}}})},setDateRange:(e,t)=>{H.update(r=>({...r,filters:{...r.filters,dateRange:{start:e,end:t}}}))},clearDateRange:()=>{H.update(e=>({...e,filters:{...e.filters,dateRange:void 0}}))},setSortBy:e=>{H.update(t=>({...t,sortBy:e}))},toggleSortOrder:()=>{H.update(e=>({...e,sortOrder:e.sortOrder==="asc"?"desc":"asc"}))},clearFilters:()=>{H.update(e=>({...e,filters:{tags:[],colors:[],dateRange:void 0}}))},reset:()=>{H.set(Fn)},getCurrentState:()=>new Promise(e=>{const t=H.subscribe(r=>{t(),e(r)})})};ve([U,H],([e,t])=>{let r=[...e];if(t.query){const n=t.query.toLowerCase();r=r.filter(s=>s.title.toLowerCase().includes(n)||s.content.toLowerCase().includes(n)||s.tags.some(a=>a.toLowerCase().includes(n)))}if(t.filters.tags.length>0&&(r=r.filter(n=>t.filters.tags.some(s=>n.tags.includes(s)))),t.filters.colors.length>0&&(r=r.filter(n=>t.filters.colors.includes(n.color))),t.filters.dateRange){const{start:n,end:s}=t.filters.dateRange;r=r.filter(a=>{const i=a.updatedAt;return i>=n&&i<=s})}return r.sort((n,s)=>{let a=0;switch(t.sortBy){case"title":a=n.title.localeCompare(s.title);break;case"createdAt":a=n.createdAt.getTime()-s.createdAt.getTime();break;case"updatedAt":a=n.updatedAt.getTime()-s.updatedAt.getTime();break}return t.sortOrder==="desc"?-a:a}),r});ve([U,H],([e,t])=>{if(!t.query||t.query.length<2)return[];const r=t.query.toLowerCase(),n=new Set;return e.forEach(s=>{s.title.toLowerCase().includes(r)&&n.add(s.title)}),e.forEach(s=>{s.tags.forEach(a=>{a.toLowerCase().includes(r)&&n.add(`#${a}`)})}),Array.from(n).slice(0,10)});ve(U,e=>{const t=new Set;return e.forEach(r=>{r.tags.forEach(n=>t.add(n))}),Array.from(t).sort()});ve(U,e=>{const t=new Set;return e.forEach(r=>{t.add(r.color)}),Array.from(t)});ve(H,e=>e.query.length>0||e.filters.tags.length>0||e.filters.colors.length>0||e.filters.dateRange!==void 0);ve(H,e=>{let t=0;return e.query.length>0&&t++,e.filters.tags.length>0&&t++,e.filters.colors.length>0&&t++,e.filters.dateRange&&t++,t});var qa=G('<button class="search-clear svelte-1d5ky4h" title="清除搜索" aria-label="清除搜索"><i class="fas fa-times"></i></button>'),Ra=G('<div class="toolbar svelte-1d5ky4h"><div class="search-container svelte-1d5ky4h"><i class="fas fa-search search-icon svelte-1d5ky4h"></i> <input type="text" class="search-input svelte-1d5ky4h" placeholder="搜索卡片内容..." aria-label="搜索卡片"/> <!></div> <div class="toolbar-actions svelte-1d5ky4h"><button class="toolbar-btn svelte-1d5ky4h" title="新建卡片" aria-label="新建卡片"><i class="fas fa-plus"></i></button> <button class="toolbar-btn svelte-1d5ky4h" title="排序" aria-label="排序卡片"><i class="fas fa-sort"></i></button> <button class="toolbar-btn svelte-1d5ky4h" title="筛选" aria-label="筛选卡片"><i class="fas fa-filter"></i></button></div></div>');function Vn(e,t){if(new.target)return Ke({component:Vn,...e});Ve(t,!1);let r=ee("");H.subscribe(g=>{D(r,g.query)});function n(g){const E=g.target;Ur.setQuery(E.value)}function s(){console.log("Sort clicked")}function a(){console.log("Filter clicked")}function i(){he.createCard()}ze();var l=Ra(),u=m(l),o=k(m(u),2);ca(o);var h=k(o,2);{var f=g=>{var E=qa();R("click",E,()=>Ur.setQuery("")),Y(g,E)};pe(h,g=>{_(r)&&g(f)})}y(u);var c=k(u,2),d=m(c),v=k(d,2),w=k(v,2);return y(c),y(l),_e(()=>fa(o,_(r))),R("input",o,n),R("click",d,i),R("click",v,s),R("click",w,a),Y(e,l),Ie({$set:We,$on:(g,E)=>Qe(t,g,E)})}var Oa=G('<div class="cards-grid svelte-1j9gbth"></div>'),La=G('<div class="cards-empty svelte-1j9gbth"><div class="cards-empty-icon svelte-1j9gbth"><i class="fas fa-search"></i></div> <h3 class="cards-empty-title svelte-1j9gbth">未找到匹配的卡片</h3> <p class="cards-empty-description svelte-1j9gbth">尝试使用不同的关键词搜索，或者创建一张新的卡片。</p></div>'),Pa=G('<div class="cards-empty svelte-1j9gbth"><div class="cards-empty-icon svelte-1j9gbth"><i class="fas fa-plus-circle"></i></div> <h3 class="cards-empty-title svelte-1j9gbth">还没有卡片</h3> <p class="cards-empty-description svelte-1j9gbth">开始创建你的第一张卡片，构建你的知识网络。</p> <button class="btn btn-primary">创建卡片</button></div>'),Fa=G('<section class="cards-view svelte-1j9gbth"><!> <div class="cards-container svelte-1j9gbth"><!></div></section>');function In(e,t){if(new.target)return Ke({component:In,...e});Ve(t,!1);let r=[],n=ee([]),s=ee("");U.subscribe(d=>{r=d,a()}),H.subscribe(d=>{D(s,d.query),a()});function a(){if(!_(s).trim())D(n,r);else{const d=_(s).toLowerCase();D(n,r.filter(v=>v.title.toLowerCase().includes(d)||v.content.toLowerCase().includes(d)||v.tags.some(w=>w.toLowerCase().includes(d))))}}function i(d){console.log("Card clicked:",d.id)}Bt(()=>{he.loadCards()}),ze();var l=Fa(),u=m(l);Vn(u,{});var o=k(u,2),h=m(o);{var f=d=>{var v=Oa();Er(v,5,()=>_(n),w=>w.id,(w,g)=>{Pn(w,{get card(){return _(g)},$$events:{click:()=>i(_(g))}})}),y(v),Y(d,v)},c=(d,v)=>{{var w=E=>{var A=La();Y(E,A)},g=E=>{var A=Pa(),b=k(m(A),6);y(A),R("click",b,()=>he.createCard()),Y(E,A)};pe(d,E=>{_(s)?E(w):E(g,!1)},v)}};pe(h,d=>{_(n).length>0?d(f):d(c,!1)})}return y(o),y(l),Y(e,l),Ie({$set:We,$on:(d,v)=>Qe(t,d,v)})}var Va=G('<span class="note-updated svelte-xhwm9i">已编辑</span>'),Ia=G('<article class="flash-note-item svelte-xhwm9i"><header class="flash-note-header svelte-xhwm9i"><div class="flash-note-category svelte-xhwm9i"><button></button> <span class="category-name svelte-xhwm9i"> </span></div> <div class="flash-note-actions svelte-xhwm9i"><button class="flash-note-action edit svelte-xhwm9i" title="编辑笔记" aria-label="编辑笔记"><i class="fas fa-edit"></i></button> <button class="flash-note-action delete svelte-xhwm9i" title="删除笔记" aria-label="删除笔记"><i class="fas fa-trash"></i></button></div></header> <div class="flash-note-content svelte-xhwm9i"> </div> <footer class="flash-note-meta svelte-xhwm9i"><span class="note-time svelte-xhwm9i"> </span> <!></footer></article>');function Mn(e,t){if(new.target)return Ke({component:Mn,...e});Ve(t,!1);let r=kr(t,"note",12);const n=Cr();function s(){n("edit",r())}function a(){n("delete",r())}function i(P){return{notes:"记事",important:"重要",tasks:"待办",inspiration:"灵感"}[P]||"未知"}ze();var l=Ia(),u=m(l),o=m(u),h=m(o),f=k(h,2),c=m(f,!0);y(f),y(o);var d=k(o,2),v=m(d),w=k(v,2);y(d),y(u);var g=k(u,2),E=m(g,!0);y(g);var A=k(g,2),b=m(A),C=m(b,!0);y(b);var p=k(b,2);{var B=P=>{var F=Va();_e($=>J(F,"title",$),[()=>(j(r()),N(()=>`更新于 ${r().updatedAt.toLocaleString()}`))],Pe),Y(P,F)};pe(p,P=>{j(r()),N(()=>r().updatedAt.getTime()!==r().createdAt.getTime())&&P(B)})}return y(A),y(l),_e((P,F,$,Z,Q)=>{ne(h,1,`category-dot ${j(r()),N(()=>r().category)??""}`,"svelte-xhwm9i"),J(h,"title",P),J(h,"aria-label",F),fe(c,$),fe(E,(j(r()),N(()=>r().content))),J(b,"title",Z),fe(C,Q)},[()=>(j(r()),N(()=>i(r().category))),()=>(j(r()),N(()=>`分类: ${i(r().category)}`)),()=>(j(r()),N(()=>i(r().category))),()=>(j(r()),N(()=>`创建于 ${r().createdAt.toLocaleString()}`)),()=>(j(Hr),j(r()),N(()=>Hr(r().createdAt)))],Pe),R("click",v,s),R("click",w,a),Y(e,l),Ie({get note(){return r()},set note(P){r(P),jt()},$set:We,$on:(P,F)=>Qe(t,P,F)})}var Ma=G('<div class="flash-note-editor-overlay svelte-qx0ril"><div class="flash-note-editor svelte-qx0ril"><header class="editor-header svelte-qx0ril"><h3 class="svelte-qx0ril"> </h3> <button class="editor-close-btn svelte-qx0ril" aria-label="关闭编辑器"><i class="fas fa-times"></i></button></header> <form class="editor-form svelte-qx0ril"><textarea class="editor-textarea svelte-qx0ril" placeholder="记录你的想法..." required></textarea> <div class="editor-options svelte-qx0ril"><div class="category-selector svelte-qx0ril"><button type="button"><div class="dot-inner svelte-qx0ril"></div></button> <button type="button"><div class="dot-inner svelte-qx0ril"></div></button> <button type="button"><div class="dot-inner svelte-qx0ril"></div></button> <button type="button"><div class="dot-inner svelte-qx0ril"></div></button></div> <div class="category-label svelte-qx0ril"> </div></div> <div class="editor-actions svelte-qx0ril"><button type="button" class="editor-btn editor-btn-cancel svelte-qx0ril">取消</button> <button type="submit" class="editor-btn editor-btn-save svelte-qx0ril">保存</button></div></form> <div class="editor-help svelte-qx0ril"><small><kbd class="svelte-qx0ril">Ctrl</kbd> + <kbd class="svelte-qx0ril">Enter</kbd> 保存 · <kbd class="svelte-qx0ril">Esc</kbd> 取消</small></div></div></div>');function jn(e,t){if(new.target)return Ke({component:jn,...e});Ve(t,!1);let r=kr(t,"note",12,null);const n=Cr();let s=ee(""),a=ee("notes"),i=ee();function l(){_(s).trim()&&n("save",{content:_(s).trim(),category:_(a)})}function u(){n("cancel")}function o(S){S.key==="Escape"?u():S.key==="Enter"&&(S.ctrlKey||S.metaKey)&&(S.preventDefault(),l())}function h(S){D(a,S)}function f(S){return{notes:"记事",important:"重要",tasks:"待办",inspiration:"灵感"}[S]}Bt(()=>{_(i)&&_(i).focus()}),Vs(()=>j(r()),()=>{r()?(D(s,r().content),D(a,r().category)):(D(s,""),D(a,"notes"))}),Is(),ze();var c=Ma(),d=m(c),v=m(d),w=m(v),g=m(w,!0);y(w);var E=k(w,2);y(v);var A=k(v,2),b=m(A);Bs(b),ha(b,S=>D(i,S),()=>_(i));var C=k(b,2),p=m(C),B=m(p);let P;var F=k(B,2);let $;var Z=k(F,2);let Q;var se=k(Z,2);let we;y(p);var Ae=k(p,2),Te=m(Ae,!0);y(Ae),y(C);var Ne=k(C,2),T=m(Ne),M=k(T,2);return y(Ne),y(A),$t(2),y(d),y(c),_e((S,ye,x,K,oe,De,xe,Ht,Un,Yn,Zn,Gn,Kn,zn)=>{fe(g,r()?"编辑闪念笔记":"新建闪念笔记"),P=ne(B,1,"category-dot notes svelte-qx0ril",null,P,S),J(B,"title",ye),J(B,"aria-label",x),$=ne(F,1,"category-dot important svelte-qx0ril",null,$,K),J(F,"title",oe),J(F,"aria-label",De),Q=ne(Z,1,"category-dot tasks svelte-qx0ril",null,Q,xe),J(Z,"title",Ht),J(Z,"aria-label",Un),we=ne(se,1,"category-dot inspiration svelte-qx0ril",null,we,Yn),J(se,"title",Zn),J(se,"aria-label",Gn),fe(Te,Kn),M.disabled=zn},[()=>({active:_(a)==="notes"}),()=>N(()=>f("notes")),()=>N(()=>`选择分类: ${f("notes")}`),()=>({active:_(a)==="important"}),()=>N(()=>f("important")),()=>N(()=>`选择分类: ${f("important")}`),()=>({active:_(a)==="tasks"}),()=>N(()=>f("tasks")),()=>N(()=>`选择分类: ${f("tasks")}`),()=>({active:_(a)==="inspiration"}),()=>N(()=>f("inspiration")),()=>N(()=>`选择分类: ${f("inspiration")}`),()=>(_(a),N(()=>f(_(a)))),()=>(_(s),N(()=>!_(s).trim()))],Pe),R("click",E,u),va(b,()=>_(s),S=>D(s,S)),R("keydown",b,o),R("click",B,()=>h("notes")),R("click",F,()=>h("important")),R("click",Z,()=>h("tasks")),R("click",se,()=>h("inspiration")),R("click",T,u),R("submit",A,Xs(l)),R("click",d,$s(function(S){_a.call(this,t,S)})),R("click",c,u),Y(e,c),Ie({get note(){return r()},set note(S){r(S),jt()},$set:We,$on:(S,ye)=>Qe(t,S,ye)})}const W=dt([]),Ce={loadNotes:async()=>{try{const e=[{id:qe(),content:"今天学习了 Svelte 5 的新特性，runes 系统真的很强大！",category:"notes",createdAt:new Date(Date.now()-36e5),updatedAt:new Date(Date.now()-36e5)},{id:qe(),content:"记住要在明天的会议上讨论项目进度和下一步计划",category:"important",createdAt:new Date(Date.now()-72e5),updatedAt:new Date(Date.now()-72e5)},{id:qe(),content:"完成 Zettelkasten 插件的核心功能开发",category:"tasks",createdAt:new Date(Date.now()-108e5),updatedAt:new Date(Date.now()-108e5)},{id:qe(),content:"可以考虑在卡片系统中加入图形化的连接视图，类似思维导图",category:"inspiration",createdAt:new Date(Date.now()-144e5),updatedAt:new Date(Date.now()-144e5)}];W.set(e),console.log("Flash notes loaded:",e.length)}catch(e){console.error("Failed to load flash notes:",e)}},saveNotes:async()=>{try{const e=await Ce.getAllNotes();console.log("Saving flash notes:",e.length)}catch(e){console.error("Failed to save flash notes:",e)}},addNote:(e,t="notes")=>{const r={...xa,id:qe(),content:e.trim(),category:t,createdAt:new Date,updatedAt:new Date};return W.update(n=>[r,...n]),Ce.saveNotes(),r.id},updateNote:(e,t)=>{W.update(r=>r.map(n=>n.id===e?{...n,...t,updatedAt:new Date}:n)),Ce.saveNotes()},deleteNote:e=>{W.update(t=>t.filter(r=>r.id!==e)),Ce.saveNotes()},getNote:e=>new Promise(t=>{const r=W.subscribe(n=>{r(),t(n.find(s=>s.id===e))})}),getAllNotes:()=>new Promise(e=>{const t=W.subscribe(r=>{t(),e(r)})}),getNotesByCategory:e=>new Promise(t=>{const r=W.subscribe(n=>{r(),t(n.filter(s=>s.category===e))})}),searchNotes:e=>new Promise(t=>{const r=W.subscribe(n=>{r();const s=e.toLowerCase().trim();t(s?n.filter(a=>a.content.toLowerCase().includes(s)):n)})}),duplicateNote:async e=>new Promise(t=>{const r=W.subscribe(n=>{r();const s=n.find(a=>a.id===e);if(s){const a=Ce.addNote(`${s.content} (副本)`,s.category);t(a)}else t(null)})}),convertToCard:e=>new Promise(t=>{const r=W.subscribe(n=>{r();const s=n.find(a=>a.id===e);s?(console.log("Converting note to card:",s),t("new-card-id")):t(null)})}),clearAllNotes:()=>{W.set([]),Ce.saveNotes()},getNotesCountByCategory:()=>new Promise(e=>{const t=W.subscribe(r=>{t();const n={all:r.length,notes:r.filter(s=>s.category==="notes").length,important:r.filter(s=>s.category==="important").length,tasks:r.filter(s=>s.category==="tasks").length,inspiration:r.filter(s=>s.category==="inspiration").length};e(n)})})};ve(W,e=>({notes:e.filter(t=>t.category==="notes"),important:e.filter(t=>t.category==="important"),tasks:e.filter(t=>t.category==="tasks"),inspiration:e.filter(t=>t.category==="inspiration")}));ve(W,e=>[...e].sort((t,r)=>r.updatedAt.getTime()-t.updatedAt.getTime()).slice(0,10));ve(W,e=>({total:e.length,notes:e.filter(t=>t.category==="notes").length,important:e.filter(t=>t.category==="important").length,tasks:e.filter(t=>t.category==="tasks").length,inspiration:e.filter(t=>t.category==="inspiration").length}));var ja=G('<div class="flash-notes-empty svelte-10slf56"><div class="flash-notes-empty-icon svelte-10slf56"><i class="fas fa-lightbulb"></i></div> <h3 class="flash-notes-empty-title svelte-10slf56"> </h3> <p class="flash-notes-empty-description svelte-10slf56">记录你的想法、灵感和待办事项，让思维不再流失。</p> <button class="btn btn-primary">创建笔记</button></div>'),Ba=G('<section class="flash-notes-view svelte-10slf56"><div class="flash-notes-container svelte-10slf56"><header class="flash-notes-header svelte-10slf56"><div class="flash-tabs svelte-10slf56"><button>全部</button> <button>记事</button> <button>重要</button> <button>待办</button> <button>灵感</button></div> <button class="flash-add-btn svelte-10slf56" aria-label="新建闪念笔记" title="新建闪念笔记"><i class="fas fa-plus"></i></button></header> <div class="flash-notes-content svelte-10slf56"><!></div></div></section> <!>',1);function Bn(e,t){if(new.target)return Ke({component:Bn,...e});Ve(t,!1);let r=[],n=ee([]),s=ee("all"),a=ee(!1),i=ee(null);W.subscribe(x=>{r=x,l()});function l(){_(s)==="all"?D(n,r):D(n,r.filter(x=>x.category===_(s)))}function u(x){D(s,x),l()}function o(){D(i,null),D(a,!0)}function h(x){D(i,x),D(a,!0)}function f(x){confirm("确定要删除这条闪念笔记吗？")&&Ce.deleteNote(x.id)}function c(x){const{content:K,category:oe}=x.detail;_(i)?Ce.updateNote(_(i).id,{content:K,category:oe}):Ce.addNote(K,oe),D(a,!1),D(i,null)}function d(){D(a,!1),D(i,null)}Bt(()=>{Ce.loadNotes()});function v(x){return{all:"全部",notes:"记事",important:"重要",tasks:"待办",inspiration:"灵感"}[x]||"未知"}ze();var w=Ba(),g=er(w),E=m(g),A=m(E),b=m(A),C=m(b);let p;var B=k(C,2);let P;var F=k(B,2);let $;var Z=k(F,2);let Q;var se=k(Z,2);let we;y(b);var Ae=k(b,2);y(A);var Te=k(A,2),Ne=m(Te);{var T=x=>{var K=Gs(),oe=er(K);Er(oe,1,()=>_(n),De=>De.id,(De,xe)=>{Mn(De,{get note(){return _(xe)},$$events:{edit:()=>h(_(xe)),delete:()=>f(_(xe))}})}),Y(x,K)},M=x=>{var K=ja(),oe=k(m(K),2),De=m(oe,!0);y(oe);var xe=k(oe,4);y(K),_e(Ht=>fe(De,Ht),[()=>_(s)==="all"?"还没有闪念笔记":`还没有${v(_(s))}笔记`],Pe),R("click",xe,o),Y(x,K)};pe(Ne,x=>{_(n).length>0?x(T):x(M,!1)})}y(Te),y(E),y(g);var S=k(g,2);{var ye=x=>{jn(x,{get note(){return _(i)},$$events:{save:c,cancel:d}})};pe(S,x=>{_(a)&&x(ye)})}return _e((x,K,oe,De,xe)=>{p=ne(C,1,"flash-tab svelte-10slf56",null,p,x),P=ne(B,1,"flash-tab svelte-10slf56",null,P,K),$=ne(F,1,"flash-tab svelte-10slf56",null,$,oe),Q=ne(Z,1,"flash-tab svelte-10slf56",null,Q,De),we=ne(se,1,"flash-tab svelte-10slf56",null,we,xe)},[()=>({active:_(s)==="all"}),()=>({active:_(s)==="notes"}),()=>({active:_(s)==="important"}),()=>({active:_(s)==="tasks"}),()=>({active:_(s)==="inspiration"})],Pe),R("click",C,()=>u("all")),R("click",B,()=>u("notes")),R("click",F,()=>u("important")),R("click",Z,()=>u("tasks")),R("click",se,()=>u("inspiration")),R("click",Ae,o),Y(e,w),Ie({$set:We,$on:(x,K)=>Qe(t,x,K)})}var Ha=G('<div class="zettelkasten-plugin svelte-i8i48y"><!> <main class="plugin-main svelte-i8i48y"><!></main></div>');function Hn(e,t){if(new.target)return Ke({component:Hn,...e});Ve(t,!1);let r=ee("cards");kt.subscribe(o=>{D(r,o)}),Bt(()=>{console.log("Zettelkasten app mounted")}),ze();var n=Ha(),s=m(n);Ln(s,{});var a=k(s,2),i=m(a);{var l=o=>{In(o,{})},u=(o,h)=>{{var f=c=>{Bn(c,{})};pe(o,c=>{_(r)==="flash-notes"&&c(f)},h)}};pe(i,o=>{_(r)==="cards"?o(l):o(u,!1)})}return y(a),y(n),Y(e,n),Ie({$set:We,$on:(o,h)=>Qe(t,o,h)})}const tt="zettelkasten-view";class Ua extends Zr.ItemView{constructor(r){super(r);Ut(this,"component")}getViewType(){return tt}getDisplayText(){return"Zettelkasten"}getIcon(){return"layers"}async onOpen(){this.component=new Hn({target:this.contentEl,props:{}})}async onClose(){this.component&&this.component.$destroy()}}class Ya extends Zr.Plugin{constructor(){super(...arguments);Ut(this,"settings")}async loadSettings(){this.settings=Object.assign({},Sa,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),this.registerView(tt,r=>new Ua(r)),this.addRibbonIcon("layers","Open Zettelkasten",()=>{this.activateView(tt)}),this.addCommand({id:"open-zettelkasten",name:"Open Zettelkasten",callback:()=>{this.activateView(tt)}}),this.addCommand({id:"create-new-card",name:"Create New Card",callback:()=>{this.activateView(tt)}}),this.addCommand({id:"create-new-flash-note",name:"Create New Flash Note",callback:()=>{this.activateView(tt)}})}onunload(){console.log("Unloading Zettelkasten plugin")}async activateView(r){const n=this.app.workspace.getLeavesOfType(r);if(n.length>0){this.app.workspace.revealLeaf(n[0]);return}const s=this.app.workspace.getRightLeaf(!1);s&&await s.setViewState({type:r,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(r)[0])}}module.exports=Ya;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
